#import "@local/itmo-report:1.0.0": *
#import "@local/typst-boxes:1.0.0": stickybox
#import "./student.typ": *

#show: project.with(
  subject: "Функциональная схемотехника",
  title: "Лабораторная работа №2",
  student: student_name,
  group: "P33302",
  teacher: "Табунщик Сергей Михайлович",
)

#set heading(numbering: none)

#let i = (path, cap) => figure(
  image(path, width: 75%),
  supplement: "Рис",
  caption: [ #cap ],
)

#let variant = 2

#let snip = (name) => raw(read(name), lang: "verilog")

= Цель работы.
Получить навыки описания арифметических блоков на RTL-уровне с использованием языка описания аппаратуры Verilog HDL.

= Задание в соответствии с вариантом.
+ Разработайте и опишите на Verilog HDL схему, вычисляющую значение функции в соответствии с заданными ограничениями согласно варианту задания.
+ Определите область допустимых значений функции.
+ Разработайте тестовое окружение для разработанной схемы. Тестовое окружение должно проверять работу схемы не менее, чем на 10 различных тестовых векторах.
+ Проведите моделирование работы схемы и определите время вычисления результата. Схема должна тактироваться от сигнала с частотой 100 МГц.
+ Составьте отчет по результатам выполнения работы.

*Вариант*: #variant \
*Функция*: $y=a^3 + root(2, b)$ \
*Ограничения*: 2 сумматора и 1 умножитель

= Ход работы

== Рисунки схем
#i("./img/func-schema.png", "Схема функции")

#i("./img/finit-automata-schema.png", "Конечный автомат Мура разработанного блока")

#i("./img/schemas-1.png", "Общая схема реализованной функции")

#i("./img/schemas-2.png", "Расписанная схема умножителя")

== Область допустимых значений для разработанного блока (ОДЗ)
Так как исходные числа восьмибитные и возводятся в третью степень, а затем происходит сложение с восьмибитным числом, получается, что выходное значение получается двадцатипяти-битное число.

== Тестирование
Для тестирования был разработан следующий модуль (использующий task):

#snip("./src/func_test.v")

При частоте 100 МГц схема отрабатывает за 510 нс

#i("./img/time-diagram.png", "Временная диаграмма")

На временной диаграмме видно, что при падении busy_w выводится верный результат: $23 + sqrt(10) = 8 + 3 = 11$

= Исходный код
== Модуль функции
#snip("./src/func.v")
== Модуль умножения
#snip("./src/mult.v")
== Модуль возведения в 3 степень
#snip("./src/pow3.v")
== Модуль извлечения корня
#snip("./src/sqrt.v")

= Вывод
В ходе данной лабораторной работы был разработана схема, вычисляющая значение арифметической функции на RTL-уровне с использованием языка описания аппаратуры Verilog HDL, а также было разработано тестовое окружение для данной схемы.

